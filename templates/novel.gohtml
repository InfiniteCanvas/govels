<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Chapter Selection</title>

	<style>
        textarea {
            width: 100%;
            height: 300px;
        }

        body {
            background-color: #121212;
            color: #ffffff;
        }

        button {
            background-color: #333333;
            color: #ffffff;
            border: 1px solid #555555;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: unset;
            margin: 4px 2px;
            cursor: pointer;
            transition: background-color 0.3s, box-shadow 0.3s, transform 0.3s;
            transform-origin: center center; /* Ensure scaling happens from the center */
        }

        button:hover {
            background-color: #3700b3; /* Darker shade of primary color */
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2); /* Shadow for hover effect */
            transform: scale(1.05); /* Slightly expand the button */
        }

        button:active {
            background-color: #03dac5; /* Accent color on click */
            box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.3); /* Pressed-in effect */
            transform: scale(0.95); /* Slightly shrink the button */
            transition: background-color 0.1s, transform 0.1s; /* Faster transform and background-color for the active state */
        }

        select, button {
            background-color: #333333;
            color: #ffffff;
            border: 1px solid #555555;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: unset;
            margin: 4px 2px;
            cursor: pointer;
        }

		textarea {
            background-color: #333333;
            color: #ffffff;
            border: 1px solid #555555;
            margin: 4px 2px;
        }

        .notification {
            visibility: hidden;
            min-width: 250px;
            margin-left: -125px;
            background-color: #4CAF50;
            color: white;
            text-align: center;
            border-radius: 2px;
            padding: 16px;
            position: fixed;
            z-index: 1;
            left: 50%;
            bottom: 30px;
            font-size: 17px;
        }

        .notification.show {
            visibility: visible;
            -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
            animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }

        @-webkit-keyframes fadein {
            from {
                bottom: 0;
                opacity: 0;
            }
            to {
                bottom: 30px;
                opacity: 1;
            }
        }

        @keyframes fadein {
            from {
                bottom: 0;
                opacity: 0;
            }
            to {
                bottom: 30px;
                opacity: 1;
            }
        }

        @-webkit-keyframes fadeout {
            from {
                bottom: 30px;
                opacity: 1;
            }
            to {
                bottom: 0;
                opacity: 0;
            }
        }

        @keyframes fadeout {
            from {
                bottom: 30px;
                opacity: 1;
            }
            to {
                bottom: 0;
                opacity: 0;
            }
        }
	</style>
</head>
<body>
<a href="/">Back to index</a>
<h2>{{.Novel.Title}}</h2>
<label for="chapterSelect">Select chapter: </label><select id="chapterSelect" onchange="chapterSelect()">
    {{range .Novel.Chapters}}
		<option>{{.}}</option>
    {{end}}
</select>
<button type="button" onclick="addPrefix()">Save template, prefix and copy chapter</button>
<button type="button" onclick="nextChapterAndAddPrefix()">Next Chapter and Add Prefix</button>
<br>
<br>
<label for="prefixText">Prepend text: </label><textarea id="prefixText" placeholder="Enter text to prepend...">{{.PrefixText}}</textarea>
<br>
<button type="button" onclick="saveTemplate()">Save prefix template</button>
<br>
<div id="notification" class="notification"></div>
</body>

<script>
    // Function to set a cookie
    function setCookie(name, value, days) {
        const d = new Date();
        d.setTime(d.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "expires=" + d.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/";
    }

    // Function to get a cookie by name
    function getCookie(name) {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    // Function to handle selection change
    async function chapterSelect() {
        const selectElement = document.getElementById("chapterSelect");
        const selectedValue = selectElement.value;
        // TODO save on server instead of in cookie
        // setCookie("selectedChapter", selectedValue, 7); // Save for 7 days
        const baseUrl = window.location.origin; // Use the current origin
        const url = new URL(`${baseUrl}/novel/select/{{.Novel.Title}}`);
        console.log("saving chapter selected at " + url);

        try {
            await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `chapter=${encodeURIComponent(selectedValue)}`
            });
            console.log("Chapter selected:", selectedValue);
        } catch (error) {
            console.error('Error selecting chapter:', error);
        }
    }

    // Function to load the selection from the server on page load
    async function loadSelection() {
        const selectElement = document.getElementById("chapterSelect");
        const baseUrl = window.location.origin; // Use the current origin
        const url = new URL(`${baseUrl}/novel/select/{{.Novel.Title}}`);

        try {
            const response = await fetch(url);
            const value = await response.text();
            console.log("Loaded selection for " + url + ", Selected " + value);
            selectElement.value = value;
        } catch (error) {
            console.error('Error loading selection:', error);
        }
    }

    async function nextChapterAndAddPrefix() {
        const chapterSelector = document.getElementById('chapterSelect');
        if (chapterSelector.selectedIndex < chapterSelector.options.length - 1) {
            chapterSelector.selectedIndex += 1;
        }
        await chapterSelect();
        await addPrefix();
    }

    async function addPrefix() {
        try {
            const baseUrl = window.location.origin; // Use the current origin
            const url = new URL(`${baseUrl}/novel/{{.Novel.Title}}`);
            await saveTemplate();
            console.log("prepend something at " + url);
            const file = document.getElementById("chapterSelect").value;
            const params = {chapter: file};
            Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));
            const response = await fetch(url);
            const data = await response.text();
            await navigator.clipboard.writeText(data);
            showNotification("Prefixed text and copied to clipboard!");
        } catch (error) {
            console.error('Error: ', error);
        }
    }

    async function saveTemplate() {
        const baseUrl = window.location.origin; // Use the current origin
        const url = new URL(`${baseUrl}/novel/{{.Novel.Title}}`);
        console.log("saving something at " + url);
        const prefixText = document.getElementById('prefixText').value;

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: `prefixText=${encodeURIComponent(prefixText)}`
            });
            const message = await response.text();
            console.log(message);
            showNotification("Template saved successfully!");
        } catch (error) {
            console.error('Error saving template text:', error);
            showNotification("Error saving template text.");
        }
        console.log("saved template");
    }

    const notificationQueue = [];
    let isShowing = false;

    function showNotification(message) {
        notificationQueue.push(message);
        processQueue();
    }

    function processQueue() {
        if (isShowing || notificationQueue.length === 0) {
            return;
        }
        isShowing = true;
        const message = notificationQueue.shift();
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.className = "notification show";

        setTimeout(() => {
            notification.className = notification.className.replace("show", "");
            isShowing = false;
            processQueue();
        }, 3000);
    }

    // Call loadSelection() on page load
    window.onload = loadSelection;
</script>

</html>
